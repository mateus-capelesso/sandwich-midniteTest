using System;
using System.Collections.Generic;
using Ingredients;
using UnityEditor;
using UnityEngine;
using Random = UnityEngine.Random;

namespace Levels
{
    public class LevelManager : MonoBehaviour
    {
        public static LevelManager Instance;

        public LevelGenerator generator;
        
        [SerializeField] private Levels storedLevels;
        private int _actualLevel;
        private int _nodesAvailableOnLevel;

        public Action OnSandwichDone;
        public Action OnNewLevelStart;
        

        private void Awake()
        {
            if (Instance == null)
                Instance = this;
            
            LoadLevels();
            LoadActualLevelValue();
        }

        private void Start()
        {
            GridManager.OnWin += AddLevel;
        }

        private void LoadLevels()
        {
            if (storedLevels == null || storedLevels.levels.Count == 0)
                storedLevels = Resources.Load<Levels>("levels");
        }

        private void LoadActualLevelValue()
        {
            _actualLevel = PlayerPrefs.HasKey("actualLevel") ? PlayerPrefs.GetInt("actualLevel") : 1;
        }

        public int GetActualLevel()
        {
            return _actualLevel;
        }

        // Get data from created Levels, if it has predefined information, or if should generate a new level
        public Level GetCurrentLevelData()
        {
            Level currentLevel;
            if (_actualLevel - 1 >= storedLevels.levels.Count)
            {
                currentLevel = generator.CreateNewLevel(_actualLevel - 1);
                storedLevels.levels.Add(currentLevel);
                #if UNITY_EDITOR
                    SaveLevel(currentLevel, _actualLevel);
                #endif

            }
            else
            {
                currentLevel = storedLevels.levels[_actualLevel - 1];
            }
            
            _nodesAvailableOnLevel = currentLevel.autoGenerated ? currentLevel.piecesAmount : currentLevel.nodes.Count;

            return currentLevel;
        }

        public void DecreaseNodesAvailable()
        {
            _nodesAvailableOnLevel--;
            if (_nodesAvailableOnLevel == 1)
            {
                OnSandwichDone?.Invoke();
            }
        }

        public void CallNewLevel()
        {
            OnNewLevelStart?.Invoke();
        }

        private void SaveLevel(Level level, int actualLevel)
        {
            #if UNITY_EDITOR
                AssetDatabase.CreateAsset(level, $"Assets/Resources/levels/{actualLevel}.asset");
                AssetDatabase.SaveAssets();
            #endif
        }

        private void AddLevel()
        {
            _actualLevel++;
            PlayerPrefs.SetInt("actualLevel", _actualLevel);
            PlayerPrefs.Save();
        }
    }
}