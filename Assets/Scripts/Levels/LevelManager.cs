using System;
using System.Collections.Generic;
using Ingredients;
using UnityEditor;
using UnityEngine;
using Random = UnityEngine.Random;

namespace Levels
{
    public class LevelManager : MonoBehaviour
    {
        public static LevelManager Instance;

        public SandwichLevelGenerator generator;
        
        [SerializeField] private SandwichLevels storedSandwichLevels;
        private int _actualLevel;
        private int _nodesAvailableOnLevel;

        public Action OnSandwichDone;
        public Action OnNewLevelStart;
        

        private void Awake()
        {
            if (Instance == null)
                Instance = this;
            
            LoadLevels();
            LoadActualLevelValue();
        }

        private void Start()
        {
            GridManager.OnWin += AddLevel;
        }

        private void LoadLevels()
        {
            if (storedSandwichLevels == null || storedSandwichLevels.levels.Count == 0)
                storedSandwichLevels = Resources.Load<SandwichLevels>("levels");
        }

        private void LoadActualLevelValue()
        {
            // PlayerPrefs.DeleteAll();
            _actualLevel = PlayerPrefs.HasKey("actualLevel") ? PlayerPrefs.GetInt("actualLevel") : 1;
        }

        public int GetActualLevel()
        {
            return _actualLevel;
        }

        // Get data from created Levels, if it has predefined information, or if should generate a new level
        public SandwichLevel GetCurrentLevelData()
        {
            SandwichLevel currentSandwichLevel;
            if (_actualLevel - 1 >= storedSandwichLevels.levels.Count)
            {
                currentSandwichLevel = generator.CreateNewLevel(_actualLevel - 1);
                storedSandwichLevels.levels.Add(currentSandwichLevel);
                #if UNITY_EDITOR
                    SaveLevel(currentSandwichLevel, _actualLevel);
                #endif

            }
            else
            {
                currentSandwichLevel = storedSandwichLevels.levels[_actualLevel - 1];
            }
            
            _nodesAvailableOnLevel = currentSandwichLevel.autoGenerated ? currentSandwichLevel.piecesAmount : currentSandwichLevel.nodes.Count;

            return currentSandwichLevel;
        }

        public void DecreaseNodesAvailable()
        {
            _nodesAvailableOnLevel--;
            if (_nodesAvailableOnLevel == 1)
            {
                OnSandwichDone?.Invoke();
            }
        }

        public void CallNewLevel()
        {
            OnNewLevelStart?.Invoke();
        }

        private void SaveLevel(SandwichLevel sandwichLevel, int actualLevel)
        {
            #if UNITY_EDITOR
                AssetDatabase.CreateAsset(sandwichLevel, $"Assets/Resources/SandwichLevels/{actualLevel}.asset");
                AssetDatabase.SaveAssets();
            #endif
        }

        private void AddLevel()
        {
            _actualLevel++;
            PlayerPrefs.SetInt("actualLevel", _actualLevel);
            PlayerPrefs.Save();
        }
    }
}