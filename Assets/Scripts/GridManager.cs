using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using DG.Tweening;
using InputManagement;
using Levels;
using Nodes;
using UnityEngine;

public class GridManager : MonoBehaviour
{
    public const int GRID_SIZE_X = 4;
    public const int GRID_SIZE_Y = 4;
    public const float NODE_HEIGHT = 0.09f;
    
    public LevelGenerator generator;
    public CameraMovement cameraMovement;
    
    private const float NodeSizeX = 1f;
    private const float NodeSizeY = 1f;
    
    private NodeContext _lastSelectedNode;
    private bool _gameIsOver = false;
    private bool _blockInputsWhileTween = false;

    private List<NodeContext> _grid;

    public static Action OnWin;
    public static Action OnLose;

    private void Start()
    {
        InputManager.OnSwipeDetected += OnSwipe;
        LevelManager.Instance.OnSandwichDone += CheckSandwichStack;
        LevelManager.Instance.OnNewLevelStart += ClearAndInstantiateGrid;
    }
    
    public void InstantiateGrid()
    {
        var rows = GRID_SIZE_X;
        var columns = GRID_SIZE_Y;

        _grid = new List<NodeContext>();

        var levelData = LevelManager.Instance.GetCurrentLevelData();

        if (levelData.autoGenerated) 
        {
            levelData = generator.GenerateLevel(levelData);
        }

        for (var x = 0; x < rows; x++)
        {
            for (var y = 0; y < columns; y++)
            {
                var nodePosition = new Vector2(x, y);
                var nodeContent = GetNodeContent(levelData, nodePosition);
                InstantiateNode(nodeContent, nodePosition);
            }
        }
            
        AssignSurroundingsToContext();
    }

    private NodeContent GetNodeContent(Level actualLevel, Vector2 position)
    {
        return actualLevel.nodes.Exists(node => node.position == position) 
            ? actualLevel.nodes.FirstOrDefault(n => n.position == position).content
            : NodeContent.Empty;
    }

    private void InstantiateNode(NodeContent content, Vector2 position)
    {
        var nodeIngredient = ObjectHandler.Instance.GetObjectFromContent(content);
        var node = Instantiate(nodeIngredient, CalculateNodePosition(position), Quaternion.identity, transform);

        var context = node.GetComponent<NodeContext>();
        context.content = content;
        context.assignedNodeObject = node;
        context.position = position;

        context.Interactable = content != NodeContent.Empty;
        
        _grid.Add(context);
    }

    private Vector3 CalculateNodePosition(Vector2 gridPosition)
    {
        return new Vector3(NodeSizeX * gridPosition.x, 0, NodeSizeY * gridPosition.y);
    }

    private Vector3 CalculateRotationByDirection(Direction direction)
    {
        switch (direction)
        {
            case Direction.Top:
                return new Vector3(-180f, 0, 0);
            case Direction.Right:
                return new Vector3(0, 0, 180f);
            case Direction.Bottom:
                return new Vector3(180f, 0, 0);
            case Direction.Left:
                return new Vector3(0, 0, -180f);
            default:
                Debug.LogError($"Couldn't find any rotation for {direction}");
                return Vector3.zero;
        }
    }

    private void AssignSurroundingsToContext()
    {
        foreach (var nodeContext in _grid)
        {
            var nodePosition = nodeContext.position;
            nodeContext.surroundingNodes = GetSurroundingContexts(nodePosition);
        }
    }

    // Analyse and add surrounding data to node context
    private List<NodeContext> GetSurroundingContexts(Vector2 position)
    {
        var top = GetContextFromPosition(new Vector2(position.x, position.y - 1));
        var right = GetContextFromPosition(new Vector2(position.x - 1, position.y));
        var bottom = GetContextFromPosition(new Vector2(position.x, position.y + 1));
        var left = GetContextFromPosition(new Vector2(position.x + 1, position.y));
        return new List<NodeContext>{top, right, bottom, left};
    }

    // It returns null if can't find node from position
    private NodeContext GetContextFromPosition(Vector2 position)
    {
        return _grid.FirstOrDefault(context => context.position == position);
    }

    private void OnSwipe(Direction swipeDirection, GameObject selectedNode)
    {
        if (_gameIsOver) return;
        if (_blockInputsWhileTween) return;
        
        var selectedContext = selectedNode.GetComponent<NodeContext>();
        var selectedStack = selectedContext.GetParent;
        if (!selectedStack.Interactable) return;
        
        
        switch (swipeDirection)
        {
            case Direction.Top:
                if (selectedStack.surroundingNodes[0] != null && selectedStack.surroundingNodes[0].Interactable)
                {
                    MoveToDesiredNode(selectedStack, selectedStack.surroundingNodes[0], swipeDirection);
                }
                break;
            case Direction.Right:
                if (selectedStack.surroundingNodes[1] != null && selectedStack.surroundingNodes[1].Interactable)
                {
                    MoveToDesiredNode(selectedStack, selectedStack.surroundingNodes[1], swipeDirection);
                }         
                break;
            case Direction.Bottom:
                if (selectedStack.surroundingNodes[2] != null && selectedStack.surroundingNodes[2].Interactable)
                {
                    MoveToDesiredNode(selectedStack, selectedStack.surroundingNodes[2], swipeDirection);
                }               
                break;
            case Direction.Left:
                if (selectedStack.surroundingNodes[3] != null && selectedStack.surroundingNodes[3].Interactable)
                {
                    MoveToDesiredNode(selectedStack, selectedStack.surroundingNodes[3], swipeDirection);
                }                
                break;
        }
    }

    private void MoveToDesiredNode(NodeContext selectedNode, NodeContext targetNode, Direction direction)
    {
        if (targetNode.content == NodeContent.Empty) return;
        
        _blockInputsWhileTween = true;
        var targetNodeHeight = GetNodeHeight(targetNode.ChildrenCount);
        var selectedNodeHeight = GetNodeHeight(selectedNode.ChildrenCount);

        // Tween rotation - rotates object to put on target node
        selectedNode.Interactable = false;
        selectedNode.parentNode = targetNode;
        targetNode.childrenNodes.Add(selectedNode);

        var rotate = CalculateRotationByDirection(direction);
        selectedNode.assignedNodeObject.transform.DORotate(
            selectedNode.assignedNodeObject.transform.rotation.eulerAngles + rotate,
            0.3f).SetEase(Ease.OutSine);
        
        // Tween movement with bezier path, from actual, to midpoint, to targetPosition, when tween is completed, enable new movement from swipe
        var targetPosition = new Vector3(
            targetNode.position.x,
            targetNodeHeight + selectedNodeHeight, 
            targetNode.position.y);

        var actualPosition = selectedNode.assignedNodeObject.transform.position;
        var midPosition = new Vector3(actualPosition.x + (targetPosition.x - actualPosition.x) / 2, 1f,
            actualPosition.z + (targetPosition.z - actualPosition.z) / 2);

        selectedNode.assignedNodeObject.transform.DOPath(new[] {midPosition, targetPosition}, 0.3f, PathType.CatmullRom).SetEase(Ease.OutSine).
            OnComplete(() =>
            {
                _blockInputsWhileTween = false;
            });
        
        _grid.Find(n => n == selectedNode).position = targetNode.position;
        
        selectedNode.assignedNodeObject.transform.SetParent(targetNode.assignedNodeObject.transform);
        _lastSelectedNode = selectedNode;
        LevelManager.Instance.DecreaseNodesAvailable();

        ValidateNodes();

    }

    private void ValidateNodes()
    {
        var activeNodes = _grid.Where(n => n.Interactable).ToList();
        if (activeNodes.Count <= 1) return;
        
        foreach (var node in activeNodes)
        {
            foreach (var neighbour in node.surroundingNodes)
            {
                if (neighbour != null && neighbour.Interactable)
                {
                    return;
                }
            }
        }
        
        Debug.Log("locked");
        OnLose?.Invoke();
    }

    private float GetNodeHeight(int childrenCount)
    {
        var height = NODE_HEIGHT;
        height += childrenCount * NODE_HEIGHT;

        return height;
    }

    // Win analysis when we got just one stack
    // if last available interactable node is a bread, and the last moved stack belonged to a bread, we got a win situation;
    private void CheckSandwichStack()
    {
        _gameIsOver = true;
        
        var winCondition = true;
        var count = 0;
        foreach (var node in _grid)
        {
            if (node.content == NodeContent.Empty || !node.Interactable) continue;
            if (node.content != NodeContent.Bread)
                winCondition = false;
            else
                count++;
        }

        if (count != 1)
        {
            winCondition = false;
        }
        
        if (_lastSelectedNode.content != NodeContent.Bread)
            winCondition = false;
        
        StartCoroutine(WaitTweenOnEnd());

        if (winCondition)
        {
            OnWin?.Invoke();
        }
        else
        {
            OnLose?.Invoke();   
        }
    }

    IEnumerator WaitTweenOnEnd()
    {
        yield return new WaitForSeconds(0.5f);
        cameraMovement.CameraLookToObject(_lastSelectedNode.GetParent.assignedNodeObject);
    }

    public void ClearAndInstantiateGrid()
    {
        if (_grid != null && _grid.Count > 0)
            ClearGrid();
        InstantiateGrid();
    }

    private void ClearGrid()
    {
        foreach (var node in _grid)
        {
            Destroy(node.gameObject);
        }
        _grid.Clear();
        
        _lastSelectedNode = null;
        _gameIsOver = false;
        _blockInputsWhileTween = false;
        
    }
}
